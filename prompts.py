"""
Module centralisant tous les prompts utilis√©s par les diff√©rents fournisseurs d'IA.
"""

import os
from dotenv import load_dotenv

# Charger les variables d'environnement depuis .env
load_dotenv()

# Param√®tres par d√©faut (utiliser les valeurs de .env si disponibles)
DEFAULT_MAX_TOKENS = int(os.getenv("DEFAULT_MAX_TOKENS", 1500))
DEFAULT_TEMPERATURE = float(os.getenv("DEFAULT_TEMPERATURE", 0.7))
DEFAULT_RETRY_COUNT = int(os.getenv("DEFAULT_RETRY_COUNT", 2))
DEFAULT_RETRY_DELAY = int(os.getenv("DEFAULT_RETRY_DELAY", 1))

# Instructions de formatage HTML communes
HTML_FORMATTING_INSTRUCTIONS = """
Utilise uniquement des balises HTML standard pour le formatage:
- <h1>, <h2>, <h3> pour les titres
- <p> pour les paragraphes
- <ul> et <li> pour les listes
- <pre><code class="language-python">...</code></pre> pour les blocs de code
- <strong> pour le texte en gras
- <em> pour le texte en italique
- <span class="text-success">‚úÖ Texte</span> pour les messages de succ√®s
- <span class="text-danger">‚ùå Texte</span> pour les messages d'erreur
- <span class="text-info">üí° Texte</span> pour les suggestions
- <span class="text-primary">üöÄ Texte</span> pour les conseils d'am√©lioration

Ne m√©lange pas HTML et Markdown. Utilise uniquement du HTML pur.
"""

# Message syst√®me principal
SYSTEM_MESSAGE = f"""Tu es un expert en programmation Python et en p√©dagogie. 
Tu aides √† cr√©er des exercices de programmation pour des √©l√®ves de lyc√©e et √† √©valuer leur code.

IMPORTANT: Tu dois formater tes r√©ponses en HTML pur pour un affichage correct dans un navigateur.

Quand tu cr√©es des exercices:
1. Utilise une structure claire avec des titres et sous-titres bien format√©s (<h1>, <h2>, <h3>)
2. Fournis un squelette de code avec plusieurs zones √† compl√©ter (3-5 minimum) marqu√©es par "# √Ä COMPL√âTER" ou "# VOTRE CODE ICI"
3. Ne fournis jamais d'exercice d√©j√† complet - il doit toujours y avoir plusieurs parties √† impl√©menter
4. Pour les niveaux Premi√®re et Terminale uniquement, inclus 2 tests maximum avec des messages de r√©ussite (‚úÖ) ou d'√©chec (‚ùå)
5. Pour les autres niveaux, ne fournis aucun test
6. Adapte la difficult√© au niveau de l'√©l√®ve (Premi√®re ou Terminale)
7. Sois pr√©cis dans tes explications et tes attentes

Quand tu √©values du code:
1. V√©rifie si le code r√©pond correctement √† l'√©nonc√©
2. Identifie les erreurs potentielles (syntaxe, logique, etc.)
3. Sugg√®re des am√©liorations (optimisation, lisibilit√©, etc.)
4. Donne des conseils pour aller plus loin
5. Sois encourageant et constructif dans tes retours

{HTML_FORMATTING_INSTRUCTIONS}
"""

def get_evaluation_prompt(code: str, enonce: str) -> str:
    """
    G√©n√®re le prompt pour l'√©valuation de code.
    
    Args:
        code: Le code Python √† √©valuer
        enonce: L'√©nonc√© de l'exercice
        
    Returns:
        Le prompt format√© pour l'√©valuation
    """
    return f"""
    √âvalue le code Python suivant par rapport √† l'√©nonc√© donn√©:
    
    √ânonc√©:
    {enonce}
    
    Code soumis:
    ```python
    {code}
    ```
    
    IMPORTANT: Ton √©valuation doit √™tre format√©e en HTML pur pour un affichage correct dans un navigateur.
    
    Ton √©valuation doit toujours inclure:
    1. Un titre principal avec <h1>√âvaluation du code</h1>
    2. Une section sur la conformit√© √† l'√©nonc√© avec <h2>Conformit√© √† l'√©nonc√©</h2>
    3. Une section sur les erreurs potentielles avec <h2>Erreurs potentielles</h2>
    4. Une section sur les suggestions d'am√©lioration avec <h2>Suggestions d'am√©lioration</h2>:
       - Si le code ne fonctionne pas: fournir UNE seule suggestion principale
       - Si le code fonctionne: fournir 3 suggestions maximum
    
    IMPORTANT: La section "Pour aller plus loin" avec <h2>Pour aller plus loin</h2> ne doit √™tre incluse QUE si le code fonctionne correctement et r√©pond √† l'√©nonc√©. Si le code contient des erreurs ou ne r√©pond pas √† l'√©nonc√©, n'inclus PAS cette section.
    
    Utilise des √©mojis et des classes pour rendre ton √©valuation plus visuelle:
    - <span class="text-success">‚úÖ Texte</span> pour les points positifs
    - <span class="text-danger">‚ùå Texte</span> pour les erreurs ou probl√®mes
    - <span class="text-info">üí° Texte</span> pour les suggestions
    - <span class="text-primary">üöÄ Texte</span> pour les conseils d'am√©lioration
    
    TR√àS IMPORTANT:
    - NE DONNE JAMAIS LA SOLUTION COMPL√àTE √† l'exercice
    - Fournis uniquement des notions de cours et des pistes de r√©flexion
    - Si tu dois donner un exemple de code, utilise un exemple diff√©rent de l'exercice ou montre seulement une petite partie de la solution
    - Guide l'√©l√®ve vers la bonne direction sans faire le travail √† sa place
    - Sois encourageant et constructif dans tes retours
    
    {HTML_FORMATTING_INSTRUCTIONS}
    """


def get_exercise_prompt(niveau: str, theme: str, difficulte: int, description: str, debutant: bool = False) -> str:
    """
    G√©n√®re le prompt pour la cr√©ation d'un √©nonc√© d'exercice.
    
    Args:
        niveau: Niveau scolaire
        theme: Th√®me de l'exercice
        difficulte: Niveau de difficult√©
        description: Description de l'exercice
        debutant: Si True, l'exercice est pour d√©butant (sans fonctions, classes, etc.)
        
    Returns:
        Prompt format√© pour l'IA
    """
    # Ajouter des instructions sp√©cifiques pour les exercices d√©butants
    niveau_python = ""
    if debutant:
        niveau_python = """
        IMPORTANT: Cet exercice est destin√© √† des d√©butants en Python. 
        N'utilise PAS de fonctions, de classes, d'objets ou d'autres concepts avanc√©s dans le squelette de code.
        Utilise uniquement des variables, des op√©rations de base, des conditions (if/else) et des boucles (for/while).
        Le code doit √™tre simple et direct, sans abstractions avanc√©es.
        """
    else:
        niveau_python = """
        Cet exercice peut utiliser des fonctions, des classes et d'autres concepts avanc√©s de Python si n√©cessaire.
        """
    
    # Si niveau Troisi√®me, consigne simplifi√©e sans tests mais avec exemples
    if "troisi√®me" in niveau.lower():
        exemples_utilisation = """
        IMPORTANT : Pour aider l'√©l√®ve, fournis au d√©but du bloc de code quelques exemples d'appels de fonctions ou d'utilisation du code, illustrant ce qu'on attend comme comportement, mais sans fournir la solution.

        Par exemple :

        <pre><code class="language-python">
        # Exemples d'utilisation attendue
        print(ma_fonction(3, 5))  # Devrait afficher 8
        print(ma_fonction(10, -2))  # Devrait afficher 8

        # Squelette √† compl√©ter
        def ma_fonction(a, b):
            # √Ä COMPL√âTER
            pass
        </code></pre>
        """
        return f"""
        G√©n√®re un √©nonc√© d'exercice Python pour un √©l√®ve de {niveau} avec les caract√©ristiques suivantes:
        - Th√®me: {theme}
        - Niveau de difficult√©: {difficulte}
        - Description: {description}
        
        {niveau_python}
        
        IMPORTANT: Ton √©nonc√© doit √™tre format√© en HTML pur pour un affichage correct dans un navigateur.
        
        L'√©nonc√© doit inclure:
        1. Un titre principal avec <h1>Titre de l'exercice</h1>
        2. Une description claire du probl√®me avec des sous-titres <h2>Section</h2>
        3. Des exemples d'entr√©es/sorties si n√©cessaire
        4. Des contraintes ou indications si n√©cessaire
        
        Ensuite, fournis un SEUL bloc de code contenant :
        - En haut, quelques exemples d'utilisation (appels de fonctions, affichages attendus)
        - Puis un squelette de code √† compl√©ter, avec 3 √† 5 zones "# √Ä COMPL√âTER" ou "pass"
        - AUCUN test automatique (pas d'assert, pas de try/except)
        
        R√àGLES IMPORTANTES POUR LE CODE :
        - Le bloc de code doit √™tre dans une balise <pre><code class="language-python">...</code></pre>
        - NE PAS utiliser la fonction input()
        - Fournir des variables d'entr√©e directement dans les exemples si n√©cessaire
        - Le squelette ne doit contenir aucune solution compl√®te ou partielle
        - Remplacer toute impl√©mentation par "# √Ä COMPL√âTER" ou "pass"
        - Laisser les signatures de fonctions, structures conditionnelles et boucles, mais vider leur contenu
        
        {exemples_utilisation}
        
        {HTML_FORMATTING_INSTRUCTIONS}
        """
    
    # Sinon, comportement actuel avec tests int√©gr√©s
    # Instructions pour les exemples de code
    code_examples = """
    Exemple de format CORRECT pour le code et les tests (dans un SEUL bloc):
    
    <pre><code class="language-python">
    def fonction(a, b):
        # √Ä COMPL√âTER: Additionner les deux nombres
        pass
        
    # Tests - NE PAS S√âPARER DU CODE CI-DESSUS
    try:
        assert fonction(1, 2) == 3
        print("‚úÖ Test 1 r√©ussi: fonction(1, 2) == 3")
    except AssertionError:
        print("‚ùå Test 1 √©chou√©: fonction(1, 2) devrait retourner 3")
    </code></pre>
    
    Exemple de squelette de code INCORRECT (car d√©j√† complet et fonctionnel):
    
    <pre><code class="language-python">
    def est_palindrome(chaine):
        # √Ä COMPL√âTER: Normaliser la cha√Æne (ignorer les espaces et la casse)
        chaine_normalisee = chaine.replace(" ", "").lower()
    
        # √Ä COMPL√âTER: V√©rifier si la cha√Æne normalis√©e est un palindrome
        if chaine_normalisee == chaine_normalisee[::-1]:
            return True
        else:
            return False
    </code></pre>
    
    Exemple de squelette de code CORRECT (avec parties √† compl√©ter, non fonctionnel):
    
    <pre><code class="language-python">
    def est_palindrome(chaine):
        # √Ä COMPL√âTER: Normaliser la cha√Æne (ignorer les espaces et la casse)
        # VOTRE CODE ICI
        
        # √Ä COMPL√âTER: V√©rifier si la cha√Æne normalis√©e est un palindrome
        # VOTRE CODE ICI
        
        # √Ä COMPL√âTER: Retourner le r√©sultat (True ou False)
        pass
    </code></pre>
    
    Autre exemple de squelette de code CORRECT (avec parties √† compl√©ter, non fonctionnel):
    
    <pre><code class="language-python">
    # Calcul de l'aire en fonction de la forme choisie
    if forme == "rectangle":
        # √Ä COMPL√âTER: Calculer l'aire du rectangle
        pass
    elif forme == "cercle":
        # √Ä COMPL√âTER: Calculer l'aire du cercle
        pass
    elif forme == "triangle":
        # √Ä COMPL√âTER: Calculer l'aire du triangle
        pass
    else:
        # √Ä COMPL√âTER: G√©rer le cas d'une forme non reconnue
        pass
    </code></pre>
    """
    
    return f"""
    G√©n√®re un √©nonc√© d'exercice Python pour un √©l√®ve de {niveau} avec les caract√©ristiques suivantes:
    - Th√®me: {theme}
    - Niveau de difficult√©: {difficulte}
    - Description: {description}
    
    {niveau_python}
    
    IMPORTANT: Ton √©nonc√© doit √™tre format√© en HTML pur pour un affichage correct dans un navigateur.
    
    L'√©nonc√© doit inclure:
    1. Un titre principal avec <h1>Titre de l'exercice</h1>
    2. Une description d√©taill√©e du probl√®me avec des sous-titres <h2>Section</h2>
    3. Des exemples d'entr√©es/sorties si n√©cessaire
    4. Des contraintes ou indications si n√©cessaire
    
    IMPORTANT: Inclus √©galement:
    5. Un squelette de code √† trous que l'√©l√®ve devra compl√©ter, SUIVI IMM√âDIATEMENT des tests dans le M√äME bloc de code.
    
    R√àGLES IMPORTANTES POUR LE CODE:
    - Le squelette de code et les tests DOIVENT √™tre dans un SEUL bloc de code <pre><code class="language-python">...</code></pre>
    - NE PAS s√©parer le squelette de code et les tests en plusieurs blocs
    - Les exemples d'entr√©es/sorties doivent √™tre en dehors du bloc de code principal
    - Utilise des commentaires comme "# √Ä COMPL√âTER" ou "# VOTRE CODE ICI" pour indiquer les parties √† remplir
    - Si des donn√©es d'entr√©e sont n√©cessaires, les fournir directement dans le code (par exemple, sous forme de variables pr√©d√©finies)
    
    R√àGLES CRUCIALES POUR LE SQUELETTE DE CODE:
    - Le squelette de code DOIT OBLIGATOIREMENT contenir ENTRE 3 ET 5 parties √† compl√©ter par l'√©l√®ve
    - NE JAMAIS fournir un code d√©j√† complet ou fonctionnel
    - SUPPRIMER SYST√âMATIQUEMENT les impl√©mentations et les remplacer par des commentaires "# √Ä COMPL√âTER" ou "# VOTRE CODE ICI"
    - M√äME pour les op√©rations simples (comme aire = longueur * largeur), TOUJOURS remplacer par "# √Ä COMPL√âTER: Calculer l'aire du rectangle" et PAS de code fonctionnel
    - Pour les structures conditionnelles, laisser la structure mais VIDER COMPL√àTEMENT le contenu des blocs
    - Pour les boucles, laisser la structure mais VIDER COMPL√àTEMENT le contenu des blocs
    - Pour les fonctions, laisser la signature mais remplacer le corps par "# √Ä COMPL√âTER" et "pass"
    - V√âRIFIER ATTENTIVEMENT que le code fourni n'est PAS fonctionnel tel quel et n√©cessite des modifications pour fonctionner
    
    R√àGLES CRUCIALES POUR LES TESTS:
    - Les tests NE DOIVENT JAMAIS contenir la solution compl√®te ou partielle
    - Les tests doivent utiliser des assertions ou des v√©rifications indirectes
    - NE JAMAIS inclure le code de la solution dans les tests
    - Utiliser des variables pour stocker les r√©sultats attendus plut√¥t que de montrer comment les calculer
    - Pour les exercices avec affichage (print), v√©rifier le r√©sultat avec des assertions sur des variables, pas en r√©p√©tant le code de la solution
    
    {code_examples}
    
    {HTML_FORMATTING_INSTRUCTIONS}
    """

def get_qcm_prompt(level, theme):
    """
    G√©n√®re un prompt pour la cr√©ation de questions QCM.
    
    Args:
        level: Le niveau scolaire
        theme: Le th√®me des questions
    
    Returns:
        Le prompt pour l'IA
    """
    return f"""
    Tu es un expert en programmation Python et en p√©dagogie. Tu dois cr√©er des questions √† choix multiples (QCM) pour des √©l√®ves de niveau {level} sur le th√®me "{theme}".

    G√©n√®re 3 questions QCM de difficult√© vari√©e (facile, moyenne, difficile) sur ce th√®me.

    Pour chaque question:
    1. Formule une question claire et pr√©cise
    2. Propose 4 options de r√©ponse dont une seule est correcte
    3. Indique clairement la r√©ponse correcte
    4. Fournis une explication d√©taill√©e de la r√©ponse correcte

    Format de r√©ponse attendu (JSON):
    [
        {{
            "question": "Texte de la question 1",
            "options": ["Option A", "Option B", "Option C", "Option D"],
            "correct": "Option correcte (doit √™tre l'une des options)",
            "explanation": "Explication d√©taill√©e de la r√©ponse correcte"
        }},
        {{
            "question": "Texte de la question 2",
            "options": ["Option A", "Option B", "Option C", "Option D"],
            "correct": "Option correcte (doit √™tre l'une des options)",
            "explanation": "Explication d√©taill√©e de la r√©ponse correcte"
        }},
        {{
            "question": "Texte de la question 3",
            "options": ["Option A", "Option B", "Option C", "Option D"],
            "correct": "Option correcte (doit √™tre l'une des options)",
            "explanation": "Explication d√©taill√©e de la r√©ponse correcte"
        }}
    ]

    IMPORTANT:
    - Les questions doivent √™tre adapt√©es au niveau {level}
    - Les questions doivent porter sur le th√®me "{theme}"
    - Les options doivent √™tre plausibles mais une seule doit √™tre correcte
    - L'explication doit √™tre p√©dagogique et aider √† comprendre pourquoi la r√©ponse est correcte
    - Respecte strictement le format JSON demand√©
    """
